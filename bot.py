import schedule
import time
import random
import requests
import os
import feedparser
from telegram import Bot

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "@toptrendingdev1"
bot = Bot(token=BOT_TOKEN)

# –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞
def assess_risk(volume, market_cap):
    if market_cap is None or volume is None:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    if market_cap < 1e7 or volume < 1e6:
        return "–í—ã—Å–æ–∫–∏–π"
    elif market_cap < 1e9 or volume < 1e7:
        return "–°—Ä–µ–¥–Ω–∏–π"
    else:
        return "–ù–∏–∑–∫–∏–π"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
def format_price(price):
    if isinstance(price, (float, int)):
        if price < 0.01:
            return f"${price:.8f}"
        elif price < 1:
            return f"${price:.4f}"
        else:
            return f"${price:,.2f}"
    return "?"

def format_volume(volume):
    if isinstance(volume, (float, int)):
        return f"${volume:,.0f}"
    return "?"

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Coinpaprika
EXCLUDED_SYMBOLS = {"BTC", "ETH", "USDT", "USDC", "BUSD", "FDUSD", "TUSD", "DAI", "XRP", "WBNB", "DOGE", "WETH", "BNB", "TRX"}

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ–º–∫–æ–π–Ω–æ–≤ –∏ NFT/DeFi-—Ç–æ–∫–µ–Ω–æ–≤
MEME_KEYWORDS = ["dog", "inu", "pepe", "meme", "elon"]
NFT_DEFI_KEYWORDS = ["nft", "defi", "swap", "dex"]

def is_meme_or_nft(token):
    name = token.get("name", "").lower()
    return any(k in name for k in MEME_KEYWORDS + NFT_DEFI_KEYWORDS)

def get_trending_projects():
    try:
        url = "https://api.coinpaprika.com/v1/tickers"
        response = requests.get(url, timeout=10)
        data = response.json()

        filtered_data = [
            token for token in data
            if token.get("symbol") not in EXCLUDED_SYMBOLS and not is_meme_or_nft(token)
        ]

        sorted_data = sorted(
            filtered_data,
            key=lambda x: x.get("quotes", {}).get("USD", {}).get("volume_24h", 0),
            reverse=True
        )[:7]

        result = []
        hashtags = []

        for i, token in enumerate(sorted_data):
            symbol = token.get("symbol", "???")
            name = token.get("name", "???")
            rank = token.get("rank", "?")
            quotes = token.get("quotes", {}).get("USD", {})
            price = quotes.get("price", "?")
            change = quotes.get("percent_change_24h", 0)
            volume = quotes.get("volume_24h", None)
            market_cap = quotes.get("market_cap", None)

            risk = assess_risk(volume, market_cap)
            price_str = format_price(price)
            volume_str = format_volume(volume)
            trend = "üîº" if isinstance(change, float) and change >= 0 else "üîª"
            change_str = f"{trend} {abs(change):.2f}%" if isinstance(change, float) else "?"

            result.append(
                f"{i+1}. ${symbol} ‚Äî –†–∞–Ω–≥ #{rank}\n"
                f"üí∞ –¶–µ–Ω–∞: {price_str} ‚Äî {change_str}\n"
                f"üìâ –û–±—ä—ë–º (24—á): {volume_str}\n"
                f"üìä –†–∏—Å–∫: {risk}"
            )
            hashtags.append(f"#{symbol}")

        return "\n\n".join(result), " ".join(hashtags)

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å Coinpaprika: {e}", ""

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ RSS (–≤–º–µ—Å—Ç–æ CryptoPanic API)
def get_crypto_news():
    try:
        feed = feedparser.parse("https://cryptopanic.com/feed")
        news = []
        for entry in feed.entries[:3]:
            title = entry.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            link = entry.get("link", "")
            news.append(f"üì∞ {title}\nüîó {link}")
        return news
    except Exception as e:
        return [f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}"]

# –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∫—Ä–∏–ø—Ç–æ—Å–æ–±—ã—Ç–∏–π

def get_crypto_events():
    try:
        url = "https://api.coinpaprika.com/v1/events"
        response = requests.get(url, timeout=10)

        if "application/json" not in response.headers.get("Content-Type", ""):
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Coinpaprika (–Ω–µ JSON)."

        events = response.json()[:3]

        result = ["üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –±–ª–∏–∂–∞–π—à–∏—Ö –∫—Ä–∏–ø—Ç–æ—Å–æ–±—ã—Ç–∏–π:"]
        for event in events:
            name = event.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            date = event.get("date", "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
            link = event.get("proof", "")
            result.append(f"üìå {name} ‚Äî {date}\nüîó {link if link else '‚Äî'}")

        return "\n\n".join(result)
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}"

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤
def send_daily_report():
    now = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    print(f"[{now}] –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥—ã Coinpaprika...")
    headers = [
        "üìä *7 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤ –ø–æ –≤–µ—Ä—Å–∏–∏ Coinpaprika:*",
        "üöÄ *–¢–æ–ø –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ —Å–ª—É—Ö—É —Å–µ–≥–æ–¥–Ω—è:*",
        "üîç *–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –ø–æ–∏—Å–∫–∏ –ø–æ Coinpaprika ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏:*",
        "üí° *–ß—Ç–æ –≤ —Ç—Ä–µ–Ω–¥–µ? –°–ø–∏—Å–æ–∫ –≥–æ—Ä—è—á–∏—Ö –∞–ª—å—Ç–æ–≤:*",
        "üî• *–¢—Ä–µ–Ω–¥—ã –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞ ‚Äî —Å–≤–µ–∂–∞—è —Å–≤–æ–¥–∫–∞:*"
    ]
    body, hashtags = get_trending_projects()
    intro = random.choice(headers)
    message = f"{intro}\n\n{body}\n\n{hashtags}"
    bot.send_message(chat_id=CHANNEL_USERNAME, text=message, parse_mode="Markdown")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
def send_crypto_news():
    print("[üì¢] –ü—É–±–ª–∏–∫—É–µ–º —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    news_items = get_crypto_news()
    for news in news_items:
        bot.send_message(chat_id=CHANNEL_USERNAME, text=news)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–æ–±—ã—Ç–∏–π
def send_crypto_events():
    print("[üìÖ] –ü—É–±–ª–∏–∫—É–µ–º –∫—Ä–∏–ø—Ç–æ—Å–æ–±—ã—Ç–∏—è...")
    events_message = get_crypto_events()
    bot.send_message(chat_id=CHANNEL_USERNAME, text=events_message)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–ø–æ UTC)
schedule.every().day.at("06:00").do(send_daily_report)    # 08:00 Brussels
schedule.every().day.at("10:00").do(send_crypto_news)      # 12:00 Brussels
schedule.every().day.at("14:00").do(send_crypto_news)      # 16:00 Brussels
schedule.every().day.at("16:00").do(send_crypto_events)    # 18:00 Brussels

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    send_daily_report()
    send_crypto_news()  # <-- –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    while True:
        schedule.run_pending()
        time.sleep(60)
