import schedule
import time
import random
import requests
import os
from telegram import Bot

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "@toptrendingdev1"
bot = Bot(token=BOT_TOKEN)

# –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞
def assess_risk(volume, market_cap):
    if market_cap is None or volume is None:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    if market_cap < 1e7 or volume < 1e6:
        return "–í—ã—Å–æ–∫–∏–π"
    elif market_cap < 1e9 or volume < 1e7:
        return "–°—Ä–µ–¥–Ω–∏–π"
    else:
        return "–ù–∏–∑–∫–∏–π"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
def format_price(price):
    if isinstance(price, (float, int)):
        if price < 0.01:
            return f"${price:.8f}"
        elif price < 1:
            return f"${price:.4f}"
        else:
            return f"${price:,.2f}"
    return "?"

def format_volume(volume):
    if isinstance(volume, (float, int)):
        return f"${volume:,.0f}"
    return "?"

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
def get_trending_projects():
    try:
        trending_url = "https://api.coingecko.com/api/v3/search/trending"
        trending_data = requests.get(trending_url, timeout=10).json().get("coins", [])[:7]
        ids = [coin["item"]["id"] for coin in trending_data]
        tickers = [f"#{coin['item']['symbol'].upper()}" for coin in trending_data]
        hashtags = " ".join(tickers)

        ids_param = ",".join(ids)
        market_url = f"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids={ids_param}&price_change_percentage=24h"
        market_response = requests.get(market_url, timeout=10)
        try:
            market_data = market_response.json()
            if not isinstance(market_data, list):
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç CoinGecko: {market_data}")
        except Exception as e:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å CoinGecko: {e}", ""

        price_info = {
            item["id"]: (
                item.get("current_price", "?"),
                round(item.get("price_change_percentage_24h", 0), 2),
                item.get("total_volume", None),
                item.get("market_cap", None)
            )
            for item in market_data
        }

        result = []
        for i, coin in enumerate(trending_data):
            item = coin["item"]
            coin_id = item["id"]
            symbol = item.get("symbol", "???").upper()
            rank = item.get("market_cap_rank", "?")
            price, change, volume, market_cap = price_info.get(coin_id, ("?", "?", None, None))

            risk = assess_risk(volume, market_cap)
            price_str = format_price(price)
            volume_str = format_volume(volume)

            trend = "üîº" if isinstance(change, float) and change >= 0 else "üîª"
            change_str = f"{trend} {abs(change)}%" if isinstance(change, float) else "?"

            result.append(
                f"{i+1}. ${symbol} ‚Äî –†–∞–Ω–≥ #{rank}\n"
                f"üí∞ –¶–µ–Ω–∞: {price_str} ‚Äî {change_str}\n"
                f"üìâ –û–±—ä—ë–º (24—á): {volume_str}\n"
                f"üìä –†–∏—Å–∫: {risk}"
            )

        return "\n\n".join(result), hashtags
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}", ""

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π (–º–æ–∫)
def get_crypto_news():
    news = [
        "üì∞ [BTC] BlackRock –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π –±–∏—Ç–∫–æ–∏–Ω-ETF ‚Äî –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤\nüîó https://www.coindesk.com/article1",
        "üì∞ [ETH] Ethereum –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∏ –¥–æ –≤–µ—Ä—Å–∏–∏ Pectra –≤ –∏—é–Ω–µ\nüîó https://www.cointelegraph.com/article2",
        "üì∞ [SOL] Solana –æ–±—ä–µ–¥–∏–Ω–∏–ª–∞—Å—å —Å Shopify –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è NFT-–æ–ø–ª–∞—Ç—ã\nüîó https://cryptoslate.com/article3"
    ]
    return random.sample(news, 2)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤
def send_daily_report():
    now = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    print(f"[{now}] –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥—ã CoinGecko...")
    headers = [
        "üìä *7 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤ –ø–æ –≤–µ—Ä—Å–∏–∏ CoinGecko:*",
        "üöÄ *–¢–æ–ø –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ —Å–ª—É—Ö—É —Å–µ–≥–æ–¥–Ω—è:*",
        "üîç *–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –ø–æ–∏—Å–∫–∏ –Ω–∞ CoinGecko ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏:*",
        "üí° *–ß—Ç–æ –≤ —Ç—Ä–µ–Ω–¥–µ? –°–ø–∏—Å–æ–∫ –≥–æ—Ä—è—á–∏—Ö –∞–ª—å—Ç–æ–≤:*",
        "üî• *–¢—Ä–µ–Ω–¥—ã –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞ ‚Äî —Å–≤–µ–∂–∞—è —Å–≤–æ–¥–∫–∞:*"
    ]
    body, hashtags = get_trending_projects()
    intro = random.choice(headers)
    message = f"{intro}\n\n{body}\n\n{hashtags}"
    bot.send_message(chat_id=CHANNEL_USERNAME, text=message, parse_mode="Markdown")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
def send_crypto_news():
    print("[üì¢] –ü—É–±–ª–∏–∫—É–µ–º —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    news_items = get_crypto_news()
    for news in news_items:
        bot.send_message(chat_id=CHANNEL_USERNAME, text=news)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–ø–æ UTC)
schedule.every().day.at("06:00").do(send_daily_report)    # 08:00 Brussels
schedule.every().day.at("10:00").do(send_crypto_news)      # 12:00 Brussels
schedule.every().day.at("14:00").do(send_crypto_news)      # 16:00 Brussels

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    send_daily_report()  # —Ç–µ—Å—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    while True:
        schedule.run_pending()
        time.sleep(60)
